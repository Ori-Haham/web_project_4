!function(){"use strict";var e={666:function(e,t,n){e.exports=n.p+"8667ac4a523e8fc42e59.svg"},937:function(e,t,n){e.exports=n.p+"c75819857ff1599f0c50.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.p="",function(){class e{constructor(e){let{baseUrl:t,authorizationCode:n}=e;this._baseUrl=t,this._authorization=n}returnJson(){return fetch(this._baseUrl,{headers:{authorization:this._authorization}}).then((e=>e.json()))}updateUserData(e,t){return fetch(this._baseUrl,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})})}postCard(e,t){return fetch(this._baseUrl,{method:"POST",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})})}deleteCard(e){return fetch("https://around.nomoreparties.co/v1/group-12/cards/".concat(e),{method:"DELETE",headers:{authorization:this._authorization}})}likeCard(e,t){return fetch("https://around.nomoreparties.co/v1/group-12/cards/likes/".concat(t),{method:e,headers:{authorization:this._authorization}})}editProfileImage(e){return fetch(this._baseUrl,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})})}}var t=n(937),r=n(666);const o={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"};class i{constructor(e,t,n){let{handleCardClick:r,updateApiOnLike:o}=n;this._name=e.name,this._link=e.link,this._likes=e.likes,this._cardSelector=t,this._handleCardClick=r,this._updateApiOnLike=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._handleCardClickListener(),this._handleCardLikeButton()}_handleCardClickListener(){this._element.querySelector(".card__image").addEventListener("click",(e=>{this._handleCardClick(e)}))}_handleCardLikeButton(){this._element.querySelector(".card__like-button").addEventListener("click",(e=>{e.target.classList.toggle("card__like-button_active"),this._updateApiOnLike(e)}))}returnLikeCounter(){return this._likesCounte=this._element.querySelector(".card__likeCounte"),this._likesCounte}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._element.querySelector(".card__location").textContent=this._name,this._likesCounte=this._element.querySelector(".card__likeCounte"),this._likesCounte.textContent=this._likes.length,this._highlightUserLike(),this._element}_highlightUserLike(){const e=this._element.querySelector(".card__like-button");this._likes.forEach((t=>{"3dcd812fefd0b46115095582"===t._id&&e.classList.add("card__like-button_active")}))}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class a extends i{constructor(e,t,n){let{handleCardClick:r,updateApiOnLike:o,handleDeleteButtonClick:i,handelCardDelete:a}=n;super(e,t,{handleCardClick:r,updateApiOnLike:o}),s(this,"_handelDelete",(()=>{this._element.remove(),this._element=null,this._cardDelete()})),s(this,"_setEventListeners",(()=>{super._setEventListeners(),this._handleDeleteButton(),this.deleteCardListenr()})),this._handleDeleteButtonClick=i,this._cardDelete=a}deleteCardListenr(){this._element.querySelector(".popup__button").addEventListener("click",this._handelDelete)}_handleDeleteButton(){this._element.querySelector(".card__remove-button").addEventListener("click",(e=>{this._handleDeleteButtonClick(e)}))}cardElement(){return this._element}}class l{constructor(e,t){var n,r;r=()=>{this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState(this._inputList,this._buttonElement)},(n="resetValidation")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._formSelector=e,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}_showInputError(e,t){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.add(this._inputErrorClass),this._errorElement.textContent=t,this._errorElement.classList.add(this._errorClass)}_hideInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputList,this._buttonElement)}))}))}enableValidation(){this._formElement=document.querySelector(this._formSelector),this._setEventListeners()}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class c{constructor(e){u(this,"_handleEscClose",(e=>{"Escape"===e.key&&this._popup.classList.add("popup-hidden")})),u(this,"_handleMouseDown",(e=>{const t=this._popup.querySelector(".popup__close-button");(e.target===t||e.target.classList.contains("popup"))&&this.close()})),this._popup=e}open(){this._popup.classList.remove("popup-hidden"),this.setEventListeners()}close(){this._popup.classList.add("popup-hidden"),this.removeEventListeners()}setEventListeners(){window.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("mousedown",this._handleMouseDown)}removeEventListeners(){window.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("mousedown",this._handleMouseDown)}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class h extends c{constructor(e,t,n){let{handleFormSubmit:r}=n;super(e),d(this,"close",(()=>{super.close(),this._form.reset(),this.removeEventListeners(),this._handelNoLoding()})),d(this,"_handelNoLoding",(()=>{this._submitButton.textContent="Saving"})),d(this,"setEventListeners",(()=>{super.setEventListeners(),this._form.addEventListener("submit",this._handleSubmit)})),d(this,"removeEventListeners",(()=>{super.removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmit)})),d(this,"_handleSubmit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),this._form=document.querySelector(t),this._submitButton=this._form.querySelector(".popup__button"),this._handleFormSubmit=r}_getInputValues(){const e=[...this._popup.querySelectorAll(".popup__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}handelLoading(){this._submitButton.textContent="Saving..."}}const _=document.querySelector(".profile__edit-button"),p=document.querySelector(".profile__add-button"),m=(document.querySelector(".profile__image-container"),document.querySelector(".profile__image-container")),b=document.querySelector(".profile__image"),f=document.querySelector(".profile__name"),C=document.querySelector(".profile__about-me"),v=document.querySelector(".profile-image-popup"),g=document.querySelector(".image-input"),E=document.querySelector(".profile-popup"),L=(E.querySelector(".profile-popup__close-button"),document.querySelector(".card-popup")),S=(L.querySelector(".card-popup__close-button"),document.querySelector(".profile-form")),k=S.querySelector(".profile-form__name"),y=S.querySelector(".profile-form__about-me"),q=(S.querySelector(".profile-form__submit-button"),document.querySelector(".card-form")),w=q.querySelector(".card-form__place"),I=q.querySelector(".card-form__url"),U=document.querySelector(".cards"),B=document.querySelector(".image-popup"),x=(B.querySelector(".image-popup__close-button"),B.querySelector(".image-popup__image")),z=B.querySelector(".image-popup__location"),D={name:f.textContent,about:C.textContent},O=new e({baseUrl:"https://around.nomoreparties.co/v1/group-12/users/me",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}),j=new e({baseUrl:"https://around.nomoreparties.co/v1/group-12/users/me",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}),P=new e({baseUrl:"https://around.nomoreparties.co/v1/group-12/users/me/avatar ",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}),T=new e({baseUrl:"https://around.nomoreparties.co/v1/group-12/cards",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}),V=new e({baseUrl:"https://around.nomoreparties.co/v1/group-12/cards",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}),A=new e({baseUrl:"",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}),J=new l(".profile-form",o),M=new l(".card-form",o),F=new l(".profile-image-form",o),N=new class{constructor(e){let{data:t}=e;this._nameElement=t.name,this._aboutMeElement=t.about}getUserInfo(){const e={};return e.name=this._nameElement,e.about=this._aboutMeElement,e}setUserInfo(e,t){this._nameElement=e,this._aboutMeElement=t}}({data:D}),H=new h(v,".profile-image-form",{handleFormSubmit:()=>{H.handelLoading(),P.editProfileImage(g.value).then((()=>{X()})).then((()=>{H.close()}))}}),G=new class extends c{constructor(e,t,n){var r,o;super(e),o=e=>{let{src:t,alt:n}=e;super.open(),this._popupImage.src=t,this._popupImage.alt=n,this._popupLocation.textContent=n},(r="open")in this?Object.defineProperty(this,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):this.open=o,this._popupImage=t,this._popupLocation=n}}(B,x,z),K=new h(E,".profile-form",{handleFormSubmit:()=>{K.handelLoading(),N.setUserInfo(k.value,y.value),j.updateUserData(N.getUserInfo().name,N.getUserInfo().about).then((()=>{W()})),K.close()}}),Q=new class{constructor(e,t){let{data:n,renderer:r}=e;this._data=n,this._container=t,this._renderer=r}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:function(t){!function(){if("3dcd812fefd0b46115095582"===t.owner._id){const n=new a(t,"#card-template",{handleCardClick:e=>{G.open({src:e.target.src,alt:e.target.alt})},handelCardDelete:()=>{new e({baseUrl:"",authorizationCode:"37c0271e-6c35-4cdb-bfdd-3d6b737f9411"}).deleteCard(t._id)},handleDeleteButtonClick:()=>{new c(n.cardElement().querySelector(".deleteCardPopup")).open()},updateApiOnLike:e=>{e.target.classList.contains("card__like-button_active")?A.likeCard("PUT",t._id).then((e=>e.json())).then((e=>(console.log(e),e))).then((e=>{n.returnLikeCounter().textContent=e.likes.length})):A.likeCard("DELETE",t._id).then((e=>e.json())).then((e=>(console.log(e),e))).then((e=>{n.returnLikeCounter().textContent=e.likes.length}))}}),r=n.generateCard();Q.addItem(r)}else{const e=new i(t,"#initial-cards-template",{handleCardClick:e=>{G.open({src:e.target.src,alt:e.target.alt})},updateApiOnLike:n=>{n.target.classList.contains("card__like-button_active")?A.likeCard("PUT",t._id).then((e=>e.json())).then((e=>e)).then((t=>{e.returnLikeCounter().textContent=t.likes.length})):A.likeCard("DELETE",t._id).then((e=>e.json())).then((e=>e)).then((t=>{e.returnLikeCounter().textContent=t.likes.length}))}}),n=e.generateCard();Q.addItem(n)}}()}},U);T.returnJson().then((e=>{Q.renderItems(e)}));const R=new h(L,".card-form",{handleFormSubmit:()=>{R.handelLoading(),V.postCard(w.value,I.value).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).then((e=>{Q.renderItems([e])})).then((()=>{R.close()}))}});function W(){O.returnJson().then((e=>{var t,n;t=e.name,n=e.about,f.textContent=t,C.textContent=n}))}function X(){O.returnJson().then((e=>b.src=e.avatar))}O.returnJson().then((e=>{N.setUserInfo(e.name,e.about)})),X(),W(),m.addEventListener("click",(function(){g.value=b.src,F.resetValidation(),H.open()})),_.addEventListener("click",(function(){!function(){const e=N.getUserInfo();k.value=e.name,y.value=e.about}(),J.resetValidation(),K.open()})),p.addEventListener("click",(function(){M.resetValidation(),R.open()})),F.enableValidation(),J.enableValidation(),M.enableValidation(),document.getElementById("logo").src=t,document.getElementById("edit-icon").src=r}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF5QlIsRUFBS1MsV0FFdENwTSxNQUFNMkwsR0FDRUEsSUFFUjNMLE1BQU0yTCxJQUNMWixFQUFTTSxZQUFZLENBQUNNLE9BRXZCM0wsTUFBSyxLQUNKZ00sRUFBZW5GLGNBVXZCLFNBQVNpRSxJQUNQckIsRUFBZTdKLGFBQWFJLE1BQU1DLElBTnBDLElBQXdCRyxFQUFNQyxFQUFORCxFQU9MSCxFQUFJRyxLQVBPQyxFQU9ESixFQUFJSSxNQU4vQm1JLEVBQVloRixZQUFjcEQsRUFDMUJxSSxFQUFhakYsWUFBY25ELEtBa0M3QixTQUFTbUssSUFDUGYsRUFBZTdKLGFBQWFJLE1BQU1xTSxHQUFVOUQsRUFBYWpGLElBQU0rSSxFQUFLckwsU0ExQnRFeUksRUFBZTdKLGFBQWFJLE1BQU1DLElBQ2hDaUssRUFBU0ksWUFBWXJLLEVBQUlHLEtBQU1ILEVBQUlJLFVBa0NyQ21LLElBRUFNLElBRUF4QyxFQUFvQnpGLGlCQUFpQixTQVZyQyxXQVBFOEYsRUFBV1QsTUFBUUssRUFBYWpGLElBU2hDMkcsRUFBbUJxQyxrQkFDbkIvQixFQUF1QnpELFVBU3pCc0IsRUFBdUJ2RixpQkFBaUIsU0EvQnhDLFlBTkEsV0FDRSxNQUFNMEosRUFBV3JDLEVBQVNHLGNBQzFCdEIsRUFBVWIsTUFBUXFFLEVBQVNuTSxLQUMzQjRJLEVBQVdkLE1BQVFxRSxFQUFTbE0sTUFJNUJtTSxHQUNBekMsRUFBcUJ1QyxrQkFDckJ6QixFQUFrQi9ELFVBOEJwQnVCLEVBQW9CeEYsaUJBQWlCLFNBM0JyQyxXQUNFbUgsRUFBa0JzQyxrQkFDbEJOLEVBQWVsRixVQTJCakJtRCxFQUFtQjNELG1CQUVuQnlELEVBQXFCekQsbUJBRXJCMEQsRUFBa0IxRCxtQkFFQWpFLFNBQVNvSyxlQUFlLFFBQ2hDbkosSUFBTW9KLEVBRUNySyxTQUFTb0ssZUFBZSxhQUNoQ25KLElBQU1xSixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvdXRpbHMvZm9ybVZhbGlkYXRpb25PYmplY3QuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy91c2VyQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0gLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9TZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBhdXRob3JpemF0aW9uQ29kZSB9KSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIHRoaXMuX2F1dGhvcml6YXRpb24gPSBhdXRob3JpemF0aW9uQ29kZTtcclxuICB9XHJcblxyXG4gIHJldHVybkpzb24oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCwge1xyXG4gICAgICBoZWFkZXJzOiB7IGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24gfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckRhdGEobmFtZSwgYWJvdXQpIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgYWJvdXQ6IGFib3V0LFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcG9zdENhcmQobmFtZSwgbGluaykge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX2Jhc2VVcmwsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGxpbms6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKFxyXG4gICAgICBgaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMi9jYXJkcy8ke2NhcmRJZH1gLFxyXG4gICAgICB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgICAgfSxcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkKG1ldGhvZCwgY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goXHJcbiAgICAgIGBodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyL2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsXHJcbiAgICAgIHtcclxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcclxuICAgICAgICBoZWFkZXJzOiB7IGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24gfSxcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGVkaXRQcm9maWxlSW1hZ2UoYXZhdGFyKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGF2YXRhcixcclxuICAgICAgfSksXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGZvcm1WYWxpZGF0aW9uT2JqZWN0ID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIucG9wdXBfX2Zvcm1cIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5wb3B1cF9faW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX2J1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwicG9wdXBfX2J1dHRvbl9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJwb3B1cF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0LWVycm9yX2FjdGl2ZVwiLFxyXG59O1xyXG4iLCJjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhLCBjYXJkU2VsZWN0b3IsIHsgaGFuZGxlQ2FyZENsaWNrLCB1cGRhdGVBcGlPbkxpa2UgfSkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9saWtlcyA9IGRhdGEubGlrZXM7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICB0aGlzLl91cGRhdGVBcGlPbkxpa2UgPSB1cGRhdGVBcGlPbkxpa2U7XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrTGlzdGVuZXIoKTtcclxuXHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkTGlrZUJ1dHRvbigpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUNhcmRDbGlja0xpc3RlbmVyKCkge1xyXG4gICAgY29uc3QgY2FyZEltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xyXG4gICAgY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayhldnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlQ2FyZExpa2VCdXR0b24oKSB7XHJcbiAgICBjb25zdCBjYXJkTGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgIGNhcmRMaWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgICAgdGhpcy5fdXBkYXRlQXBpT25MaWtlKGV2dCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybkxpa2VDb3VudGVyKCkge1xyXG4gICAgdGhpcy5fbGlrZXNDb3VudGUgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZUNvdW50ZVwiKTtcclxuICAgIHJldHVybiB0aGlzLl9saWtlc0NvdW50ZTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcblxyXG4gICAgaW1hZ2VFbGVtZW50LnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICBpbWFnZUVsZW1lbnQuYWx0ID0gdGhpcy5fbmFtZTtcclxuXHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbG9jYXRpb25cIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX2xpa2VzQ291bnRlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2VDb3VudGVcIik7XHJcbiAgICB0aGlzLl9saWtlc0NvdW50ZS50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuXHJcbiAgICB0aGlzLl9oaWdobGlnaHRVc2VyTGlrZSgpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX2hpZ2hsaWdodFVzZXJMaWtlKCkge1xyXG4gICAgY29uc3QgY2FyZExpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XHJcbiAgICB0aGlzLl9saWtlcy5mb3JFYWNoKChsaWtlKSA9PiB7XHJcbiAgICAgIGlmIChsaWtlLl9pZCA9PT0gXCIzZGNkODEyZmVmZDBiNDYxMTUwOTU1ODJcIikge1xyXG4gICAgICAgIGNhcmRMaWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQ2FyZCB9O1xyXG4iLCJpbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4vQ2FyZFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckNhcmQgZXh0ZW5kcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGEsXHJcbiAgICBjYXJkU2VsZWN0b3IsXHJcbiAgICB7XHJcbiAgICAgIGhhbmRsZUNhcmRDbGljayxcclxuICAgICAgdXBkYXRlQXBpT25MaWtlLFxyXG4gICAgICBoYW5kbGVEZWxldGVCdXR0b25DbGljayxcclxuICAgICAgaGFuZGVsQ2FyZERlbGV0ZSxcclxuICAgIH1cclxuICApIHtcclxuICAgIHN1cGVyKGRhdGEsIGNhcmRTZWxlY3RvciwgeyBoYW5kbGVDYXJkQ2xpY2ssIHVwZGF0ZUFwaU9uTGlrZSB9KTtcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrID0gaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2s7XHJcbiAgICB0aGlzLl9jYXJkRGVsZXRlID0gaGFuZGVsQ2FyZERlbGV0ZTtcclxuICB9XHJcblxyXG4gIF9oYW5kZWxEZWxldGUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgICB0aGlzLl9jYXJkRGVsZXRlKCk7XHJcbiAgfTtcclxuXHJcbiAgZGVsZXRlQ2FyZExpc3RlbnIoKSB7XHJcbiAgICBjb25zdCBkZWxldGVDYXJkQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19idXR0b25cIik7XHJcbiAgICBkZWxldGVDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kZWxEZWxldGUpO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzID0gKCkgPT4ge1xyXG4gICAgc3VwZXIuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQnV0dG9uKCk7XHJcbiAgICB0aGlzLmRlbGV0ZUNhcmRMaXN0ZW5yKCk7XHJcbiAgfTtcclxuXHJcbiAgX2hhbmRsZURlbGV0ZUJ1dHRvbigpIHtcclxuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19yZW1vdmUtYnV0dG9uXCIpO1xyXG4gICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrKGV2dCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNhcmRFbGVtZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG59XHJcbiIsImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKGZvcm1TZWxlY3RvciwgdmFsaWRhdGlvbk9iamVjdCkge1xyXG4gICAgdGhpcy5fZm9ybVNlbGVjdG9yID0gZm9ybVNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHZhbGlkYXRpb25PYmplY3QuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gdmFsaWRhdGlvbk9iamVjdC5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSB2YWxpZGF0aW9uT2JqZWN0LmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSB2YWxpZGF0aW9uT2JqZWN0LmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSB2YWxpZGF0aW9uT2JqZWN0LmVycm9yQ2xhc3M7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoaW5wdXRMaXN0KSB7XHJcbiAgICByZXR1cm4gaW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICByZXR1cm4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCh0aGlzLl9pbnB1dExpc3QpKSB7XHJcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IFtcclxuICAgICAgLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKSxcclxuICAgIF07XHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3JcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSh0aGlzLl9pbnB1dExpc3QsIHRoaXMuX2J1dHRvbkVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9mb3JtU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbiA9ICgpID0+IHtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKHRoaXMuX2lucHV0TGlzdCwgdGhpcy5fYnV0dG9uRWxlbWVudCk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHsgRm9ybVZhbGlkYXRvciB9O1xyXG4iLCJleHBvcnQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gcG9wdXBTZWxlY3RvcjtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXAtaGlkZGVuXCIpO1xyXG4gICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXAtaGlkZGVuXCIpO1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9oYW5kbGVNb3VzZURvd24pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgdGhpcy5fcG9wdXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9oYW5kbGVNb3VzZURvd24pO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwLWhpZGRlblwiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBfaGFuZGxlTW91c2VEb3duID0gKGV2dCkgPT4ge1xyXG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jbG9zZS1idXR0b25cIik7XHJcbiAgICBpZiAoZXZ0LnRhcmdldCA9PT0gY2xvc2VCdXR0b24gfHwgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cFwiKSkge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGZvcm0sIHsgaGFuZGxlRm9ybVN1Ym1pdCB9KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGZvcm0pO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19idXR0b25cIik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGlucHV0TGlzdCA9IFsuLi50aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHVwX19pbnB1dFwiKV07XHJcblxyXG4gICAgY29uc3QgZm9ybVZhbHVlcyA9IHt9O1xyXG5cclxuICAgIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBmb3JtVmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmb3JtVmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UgPSAoKSA9PiB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgdGhpcy5fZm9ybS5yZXNldCgpO1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5faGFuZGVsTm9Mb2RpbmcoKTtcclxuICB9O1xyXG5cclxuICBoYW5kZWxMb2FkaW5nKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZpbmcuLi5cIjtcclxuICB9XHJcblxyXG4gIF9oYW5kZWxOb0xvZGluZyA9ICgpID0+IHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nXCI7XHJcbiAgfTtcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZVN1Ym1pdCk7XHJcbiAgfTtcclxuXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcbiAgICBzdXBlci5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZVN1Ym1pdCk7XHJcbiAgfTtcclxuXHJcbiAgX2hhbmRsZVN1Ym1pdCA9IChldnQpID0+IHtcclxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICB9O1xyXG59XHJcbiIsImNvbnN0IHByb2ZpbGVQb3B1cE9wZW5CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCIpO1xyXG5jb25zdCBjYXJkUG9wdXBPcGVuQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xyXG5cclxuY29uc3QgcHJvZmlsZUltYWdlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIi5wcm9maWxlX19pbWFnZS1jb250YWluZXJcIlxyXG4pO1xyXG5cclxuY29uc3QgcHJvZmlsZUltYWdlT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2UtY29udGFpbmVyXCIpO1xyXG5jb25zdCBwcm9maWxlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlXCIpO1xyXG5jb25zdCBwcm9maWxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fbmFtZVwiKTtcclxuY29uc3QgcHJvZmlsZUFib3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hYm91dC1tZVwiKTtcclxuXHJcbmNvbnN0IHByb2ZpbGVJbWFnZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlLWltYWdlLXBvcHVwXCIpO1xyXG5jb25zdCBpbWFnZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbWFnZS1pbnB1dFwiKTtcclxuXHJcbmNvbnN0IHByb2ZpbGVQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZS1wb3B1cFwiKTtcclxuY29uc3QgcHJvZmlsZVBvcHVwQ2xvc2VCdXR0b24gPSBwcm9maWxlUG9wdXAucXVlcnlTZWxlY3RvcihcclxuICBcIi5wcm9maWxlLXBvcHVwX19jbG9zZS1idXR0b25cIlxyXG4pO1xyXG5cclxuY29uc3QgY2FyZFBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkLXBvcHVwXCIpO1xyXG5jb25zdCBjYXJkUG9wdXBDbG9zZUJ1dHRvbiA9IGNhcmRQb3B1cC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLmNhcmQtcG9wdXBfX2Nsb3NlLWJ1dHRvblwiXHJcbik7XHJcblxyXG5jb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZS1mb3JtXCIpO1xyXG5jb25zdCBuYW1lSW5wdXQgPSBwcm9maWxlRm9ybS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGUtZm9ybV9fbmFtZVwiKTtcclxuY29uc3QgYWJvdXRJbnB1dCA9IHByb2ZpbGVGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZS1mb3JtX19hYm91dC1tZVwiKTtcclxuY29uc3Qgc3VibWl0UHJvZmlsZUJ1dHRvbiA9IHByb2ZpbGVGb3JtLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIucHJvZmlsZS1mb3JtX19zdWJtaXQtYnV0dG9uXCJcclxuKTtcclxuXHJcbmNvbnN0IGNhcmRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkLWZvcm1cIik7XHJcbmNvbnN0IHBhbGNlSW5wdXQgPSBjYXJkRm9ybS5xdWVyeVNlbGVjdG9yKFwiLmNhcmQtZm9ybV9fcGxhY2VcIik7XHJcbmNvbnN0IHVybElucHV0ID0gY2FyZEZvcm0ucXVlcnlTZWxlY3RvcihcIi5jYXJkLWZvcm1fX3VybFwiKTtcclxuXHJcbmNvbnN0IGNhcmRzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc1wiKTtcclxuXHJcbmNvbnN0IGltYWdlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmltYWdlLXBvcHVwXCIpO1xyXG5jb25zdCBpbWFnZVBvcHVwQ2xvc2VCdXR0b24gPSBpbWFnZVBvcHVwLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIuaW1hZ2UtcG9wdXBfX2Nsb3NlLWJ1dHRvblwiXHJcbik7XHJcbmNvbnN0IGltYWdlUG9wdXBJbWFnZSA9IGltYWdlUG9wdXAucXVlcnlTZWxlY3RvcihcIi5pbWFnZS1wb3B1cF9faW1hZ2VcIik7XHJcbmNvbnN0IGltYWdlUG9wdXBMb2NhdGlvbiA9IGltYWdlUG9wdXAucXVlcnlTZWxlY3RvcihcIi5pbWFnZS1wb3B1cF9fbG9jYXRpb25cIik7XHJcbmNvbnN0IHVzZXJJbmZvT2JqZWN0ID0ge1xyXG4gIG5hbWU6IHByb2ZpbGVOYW1lLnRleHRDb250ZW50LFxyXG4gIGFib3V0OiBwcm9maWxlQWJvdXQudGV4dENvbnRlbnQsXHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gIHByb2ZpbGVQb3B1cE9wZW5CdXR0b24sXHJcbiAgY2FyZFBvcHVwT3BlbkJ1dHRvbixcclxuICBwcm9maWxlSW1hZ2VDb250YWluZXIsXHJcbiAgcHJvZmlsZUltYWdlT3ZlcmxheSxcclxuICBwcm9maWxlSW1hZ2UsXHJcbiAgcHJvZmlsZU5hbWUsXHJcbiAgcHJvZmlsZUFib3V0LFxyXG4gIHByb2ZpbGVJbWFnZVBvcHVwLFxyXG4gIGltYWdlSW5wdXQsXHJcbiAgcHJvZmlsZVBvcHVwLFxyXG4gIHByb2ZpbGVQb3B1cENsb3NlQnV0dG9uLFxyXG4gIGNhcmRQb3B1cCxcclxuICBjYXJkUG9wdXBDbG9zZUJ1dHRvbixcclxuICBwcm9maWxlRm9ybSxcclxuICBuYW1lSW5wdXQsXHJcbiAgYWJvdXRJbnB1dCxcclxuICBzdWJtaXRQcm9maWxlQnV0dG9uLFxyXG4gIGNhcmRGb3JtLFxyXG4gIHBhbGNlSW5wdXQsXHJcbiAgdXJsSW5wdXQsXHJcbiAgY2FyZHNDb250YWluZXIsXHJcbiAgaW1hZ2VQb3B1cCxcclxuICBpbWFnZVBvcHVwQ2xvc2VCdXR0b24sXHJcbiAgaW1hZ2VQb3B1cEltYWdlLFxyXG4gIGltYWdlUG9wdXBMb2NhdGlvbixcclxuICB1c2VySW5mb09iamVjdCxcclxufTtcclxuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5pbXBvcnQgbG9nb1NyYyBmcm9tIFwiLi4vaW1hZ2VzL2xvZ28uc3ZnXCI7XHJcbmltcG9ydCBwcm9maWxlU3JjIGZyb20gXCIuLi9pbWFnZXMvZWRpdC5zdmdcIjtcclxuaW1wb3J0IHsgZm9ybVZhbGlkYXRpb25PYmplY3QgfSBmcm9tIFwiLi4vc2NyaXB0cy91dGlscy9mb3JtVmFsaWRhdGlvbk9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBVc2VyQ2FyZCBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL3VzZXJDYXJkXCI7XHJcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybSBcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9zY3JpcHRzL2NvbXBvbmVudHMvVXNlckluZm9cIjtcclxuaW1wb3J0IHtcclxuICBwcm9maWxlUG9wdXBPcGVuQnV0dG9uLFxyXG4gIGNhcmRQb3B1cE9wZW5CdXR0b24sXHJcbiAgcHJvZmlsZVBvcHVwLFxyXG4gIGNhcmRQb3B1cCxcclxuICBuYW1lSW5wdXQsXHJcbiAgYWJvdXRJbnB1dCxcclxuICBwcm9maWxlSW1hZ2VQb3B1cCxcclxuICBjYXJkc0NvbnRhaW5lcixcclxuICBpbWFnZVBvcHVwLFxyXG4gIHVzZXJJbmZvT2JqZWN0LFxyXG4gIGltYWdlUG9wdXBJbWFnZSxcclxuICBpbWFnZVBvcHVwTG9jYXRpb24sXHJcbiAgcGFsY2VJbnB1dCxcclxuICB1cmxJbnB1dCxcclxuICBwcm9maWxlTmFtZSxcclxuICBwcm9maWxlQWJvdXQsXHJcbiAgcHJvZmlsZUltYWdlT3ZlcmxheSxcclxuICBwcm9maWxlSW1hZ2UsXHJcbiAgaW1hZ2VJbnB1dCxcclxufSBmcm9tIFwiLi4vc2NyaXB0cy91dGlscy9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwXCI7XHJcblxyXG5jb25zdCBnZXRVc2VySW5mb0FwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMi91c2Vycy9tZVwiLFxyXG4gIGF1dGhvcml6YXRpb25Db2RlOiBcIjM3YzAyNzFlLTZjMzUtNGNkYi1iZmRkLTNkNmI3MzdmOTQxMVwiLFxyXG59KTtcclxuXHJcbmNvbnN0IHVwZGF0ZVVzZXJJbmZvQXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyL3VzZXJzL21lXCIsXHJcbiAgYXV0aG9yaXphdGlvbkNvZGU6IFwiMzdjMDI3MWUtNmMzNS00Y2RiLWJmZGQtM2Q2YjczN2Y5NDExXCIsXHJcbn0pO1xyXG5cclxuY29uc3QgcHJvZmlsZUltYWdlQXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyL3VzZXJzL21lL2F2YXRhciBcIixcclxuICBhdXRob3JpemF0aW9uQ29kZTogXCIzN2MwMjcxZS02YzM1LTRjZGItYmZkZC0zZDZiNzM3Zjk0MTFcIixcclxufSk7XHJcblxyXG5jb25zdCBpbml0aWFsQ2FyZGRBcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTIvY2FyZHNcIixcclxuICBhdXRob3JpemF0aW9uQ29kZTogXCIzN2MwMjcxZS02YzM1LTRjZGItYmZkZC0zZDZiNzM3Zjk0MTFcIixcclxufSk7XHJcblxyXG5jb25zdCBwb3N0Q2FyZEFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMi9jYXJkc1wiLFxyXG4gIGF1dGhvcml6YXRpb25Db2RlOiBcIjM3YzAyNzFlLTZjMzUtNGNkYi1iZmRkLTNkNmI3MzdmOTQxMVwiLFxyXG59KTtcclxuXHJcbmNvbnN0IGxpa2VDYXJkQXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJcIixcclxuICBhdXRob3JpemF0aW9uQ29kZTogXCIzN2MwMjcxZS02YzM1LTRjZGItYmZkZC0zZDZiNzM3Zjk0MTFcIixcclxufSk7XHJcblxyXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIFwiLnByb2ZpbGUtZm9ybVwiLFxyXG4gIGZvcm1WYWxpZGF0aW9uT2JqZWN0XHJcbik7XHJcblxyXG5jb25zdCBjYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFwiLmNhcmQtZm9ybVwiLCBmb3JtVmFsaWRhdGlvbk9iamVjdCk7XHJcblxyXG5jb25zdCBpbWFnZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcclxuICBcIi5wcm9maWxlLWltYWdlLWZvcm1cIixcclxuICBmb3JtVmFsaWRhdGlvbk9iamVjdFxyXG4pO1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oeyBkYXRhOiB1c2VySW5mb09iamVjdCB9KTtcclxuXHJcbmNvbnN0IHByb2ZpbGVJbWFnZVBvcHVwQ2xhc3MgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBwcm9maWxlSW1hZ2VQb3B1cCxcclxuICBcIi5wcm9maWxlLWltYWdlLWZvcm1cIixcclxuICB7XHJcbiAgICBoYW5kbGVGb3JtU3VibWl0OiAoKSA9PiB7XHJcbiAgICAgIHByb2ZpbGVJbWFnZVBvcHVwQ2xhc3MuaGFuZGVsTG9hZGluZygpO1xyXG4gICAgICBwcm9maWxlSW1hZ2VBcGlcclxuICAgICAgICAuZWRpdFByb2ZpbGVJbWFnZShpbWFnZUlucHV0LnZhbHVlKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHNldFVzZXJJbWFnZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgcHJvZmlsZUltYWdlUG9wdXBDbGFzcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICB9XHJcbik7XHJcblxyXG5jb25zdCBwb3B1cEltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKFxyXG4gIGltYWdlUG9wdXAsXHJcbiAgaW1hZ2VQb3B1cEltYWdlLFxyXG4gIGltYWdlUG9wdXBMb2NhdGlvblxyXG4pO1xyXG5cclxuY29uc3QgcHJvZmlsZVBvcHVwQ2xhc3MgPSBuZXcgUG9wdXBXaXRoRm9ybShwcm9maWxlUG9wdXAsIFwiLnByb2ZpbGUtZm9ybVwiLCB7XHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKCkgPT4ge1xyXG4gICAgcHJvZmlsZVBvcHVwQ2xhc3MuaGFuZGVsTG9hZGluZygpO1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8obmFtZUlucHV0LnZhbHVlLCBhYm91dElucHV0LnZhbHVlKTtcclxuICAgIHVwZGF0ZVVzZXJJbmZvQXBpXHJcbiAgICAgIC51cGRhdGVVc2VyRGF0YSh1c2VySW5mby5nZXRVc2VySW5mbygpLm5hbWUsIHVzZXJJbmZvLmdldFVzZXJJbmZvKCkuYWJvdXQpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICBoYW5kZWxVc2VySW5mbygpO1xyXG4gICAgICB9KTtcclxuICAgIHByb2ZpbGVQb3B1cENsYXNzLmNsb3NlKCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG5mdW5jdGlvbiByZW5kZXJDYXJkKGl0ZW0pIHtcclxuICBmdW5jdGlvbiBpc1VzZXJDYXJkKCkge1xyXG4gICAgaWYgKGl0ZW0ub3duZXIuX2lkID09PSBcIjNkY2Q4MTJmZWZkMGI0NjExNTA5NTU4MlwiKSB7XHJcbiAgICAgIGNvbnN0IGNhcmQgPSBuZXcgVXNlckNhcmQoaXRlbSwgXCIjY2FyZC10ZW1wbGF0ZVwiLCB7XHJcbiAgICAgICAgaGFuZGxlQ2FyZENsaWNrOiAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICBwb3B1cEltYWdlLm9wZW4oeyBzcmM6IGV2dC50YXJnZXQuc3JjLCBhbHQ6IGV2dC50YXJnZXQuYWx0IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFuZGVsQ2FyZERlbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZGVsZXRlQ2FyZEFwaSA9IG5ldyBBcGkoe1xyXG4gICAgICAgICAgICBiYXNlVXJsOiBcIlwiLFxyXG4gICAgICAgICAgICBhdXRob3JpemF0aW9uQ29kZTogXCIzN2MwMjcxZS02YzM1LTRjZGItYmZkZC0zZDZiNzM3Zjk0MTFcIixcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZGVsZXRlQ2FyZEFwaS5kZWxldGVDYXJkKGl0ZW0uX2lkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBkZWxldGVDYXJkUG9wdXAgPSBuZXcgUG9wdXAoXHJcbiAgICAgICAgICAgIGNhcmQuY2FyZEVsZW1lbnQoKS5xdWVyeVNlbGVjdG9yKFwiLmRlbGV0ZUNhcmRQb3B1cFwiKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGRlbGV0ZUNhcmRQb3B1cC5vcGVuKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGRhdGVBcGlPbkxpa2U6IChldnQpID0+IHtcclxuICAgICAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKSkge1xyXG4gICAgICAgICAgICBsaWtlQ2FyZEFwaVxyXG4gICAgICAgICAgICAgIC5saWtlQ2FyZChcIlBVVFwiLCBpdGVtLl9pZClcclxuICAgICAgICAgICAgICAudGhlbigocikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuanNvbigpO1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgLnRoZW4oKHIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAudGhlbigocikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FyZC5yZXR1cm5MaWtlQ291bnRlcigpLnRleHRDb250ZW50ID0gci5saWtlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaWtlQ2FyZEFwaVxyXG4gICAgICAgICAgICAgIC5saWtlQ2FyZChcIkRFTEVURVwiLCBpdGVtLl9pZClcclxuICAgICAgICAgICAgICAudGhlbigocikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuanNvbigpO1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgLnRoZW4oKHIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAudGhlbigocikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FyZC5yZXR1cm5MaWtlQ291bnRlcigpLnRleHRDb250ZW50ID0gci5saWtlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxuICAgICAgY2FyZExpc3QuYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBjYXJkID0gbmV3IENhcmQoaXRlbSwgXCIjaW5pdGlhbC1jYXJkcy10ZW1wbGF0ZVwiLCB7XHJcbiAgICAgICAgaGFuZGxlQ2FyZENsaWNrOiAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICBwb3B1cEltYWdlLm9wZW4oeyBzcmM6IGV2dC50YXJnZXQuc3JjLCBhbHQ6IGV2dC50YXJnZXQuYWx0IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXBkYXRlQXBpT25MaWtlOiAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIikpIHtcclxuICAgICAgICAgICAgbGlrZUNhcmRBcGlcclxuICAgICAgICAgICAgICAubGlrZUNhcmQoXCJQVVRcIiwgaXRlbS5faWQpXHJcbiAgICAgICAgICAgICAgLnRoZW4oKGxpa2UpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaWtlLmpzb24oKTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIC50aGVuKChsaWtlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlrZTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIC50aGVuKChsaWtlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYXJkLnJldHVybkxpa2VDb3VudGVyKCkudGV4dENvbnRlbnQgPSBsaWtlLmxpa2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpa2VDYXJkQXBpXHJcbiAgICAgICAgICAgICAgLmxpa2VDYXJkKFwiREVMRVRFXCIsIGl0ZW0uX2lkKVxyXG4gICAgICAgICAgICAgIC50aGVuKChsaWtlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlrZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAudGhlbigobGlrZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpa2U7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAudGhlbigobGlrZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FyZC5yZXR1cm5MaWtlQ291bnRlcigpLnRleHRDb250ZW50ID0gbGlrZS5saWtlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxuICAgICAgY2FyZExpc3QuYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlzVXNlckNhcmQoKTtcclxufVxyXG5cclxuY29uc3QgY2FyZExpc3QgPSBuZXcgU2VjdGlvbihcclxuICB7XHJcbiAgICByZW5kZXJlcjogcmVuZGVyQ2FyZCxcclxuICB9LFxyXG4gIGNhcmRzQ29udGFpbmVyXHJcbik7XHJcblxyXG5pbml0aWFsQ2FyZGRBcGkucmV0dXJuSnNvbigpLnRoZW4oKHJlcykgPT4ge1xyXG4gIGNhcmRMaXN0LnJlbmRlckl0ZW1zKHJlcyk7XHJcbn0pO1xyXG5cclxuY29uc3QgY2FyZFBvcHVwQ2xhc3MgPSBuZXcgUG9wdXBXaXRoRm9ybShjYXJkUG9wdXAsIFwiLmNhcmQtZm9ybVwiLCB7XHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKCkgPT4ge1xyXG4gICAgY2FyZFBvcHVwQ2xhc3MuaGFuZGVsTG9hZGluZygpO1xyXG4gICAgcG9zdENhcmRBcGlcclxuICAgICAgLnBvc3RDYXJkKHBhbGNlSW5wdXQudmFsdWUsIHVybElucHV0LnZhbHVlKVxyXG4gICAgICAudGhlbigoY2FyZCkgPT4ge1xyXG4gICAgICAgIGlmIChjYXJkLm9rKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2FyZC5qc29uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7Y2FyZC5zdGF0dXN9YCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKChjYXJkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGNhcmQ7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKChjYXJkKSA9PiB7XHJcbiAgICAgICAgY2FyZExpc3QucmVuZGVySXRlbXMoW2NhcmRdKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGNhcmRQb3B1cENsYXNzLmNsb3NlKCk7XHJcbiAgICAgIH0pO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc2V0UHJvZmlsZUluZm8obmFtZSwgYWJvdXQpIHtcclxuICBwcm9maWxlTmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgcHJvZmlsZUFib3V0LnRleHRDb250ZW50ID0gYWJvdXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRlbFVzZXJJbmZvKCkge1xyXG4gIGdldFVzZXJJbmZvQXBpLnJldHVybkpzb24oKS50aGVuKChyZXMpID0+IHtcclxuICAgIHNldFByb2ZpbGVJbmZvKHJlcy5uYW1lLCByZXMuYWJvdXQpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5nZXRVc2VySW5mb0FwaS5yZXR1cm5Kc29uKCkudGhlbigocmVzKSA9PiB7XHJcbiAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzLm5hbWUsIHJlcy5hYm91dCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gZmlsbFByb2ZpbGVGb3JtKCkge1xyXG4gIGNvbnN0IHVzZXJEYXRhID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBuYW1lSW5wdXQudmFsdWUgPSB1c2VyRGF0YS5uYW1lO1xyXG4gIGFib3V0SW5wdXQudmFsdWUgPSB1c2VyRGF0YS5hYm91dDtcclxufVxyXG5cclxuZnVuY3Rpb24gb3BlblByb2ZpbGVGb3JtKCkge1xyXG4gIGZpbGxQcm9maWxlRm9ybSgpO1xyXG4gIHByb2ZpbGVGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIHByb2ZpbGVQb3B1cENsYXNzLm9wZW4oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3BlbkNhcmRQb3B1cCgpIHtcclxuICBjYXJkRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcclxuICBjYXJkUG9wdXBDbGFzcy5vcGVuKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbGxJbWFnZUZvcm0oKSB7XHJcbiAgaW1hZ2VJbnB1dC52YWx1ZSA9IHByb2ZpbGVJbWFnZS5zcmM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFVzZXJJbWFnZSgpIHtcclxuICBnZXRVc2VySW5mb0FwaS5yZXR1cm5Kc29uKCkudGhlbigoaW5mbykgPT4gKHByb2ZpbGVJbWFnZS5zcmMgPSBpbmZvLmF2YXRhcikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvcGVuUG9wdXBJbWFnZSgpIHtcclxuICBmaWxsSW1hZ2VGb3JtKCk7XHJcbiAgaW1hZ2VGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIHByb2ZpbGVJbWFnZVBvcHVwQ2xhc3Mub3BlbigpO1xyXG59XHJcblxyXG5zZXRVc2VySW1hZ2UoKTtcclxuXHJcbmhhbmRlbFVzZXJJbmZvKCk7XHJcblxyXG5wcm9maWxlSW1hZ2VPdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuUG9wdXBJbWFnZSk7XHJcblxyXG5wcm9maWxlUG9wdXBPcGVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuUHJvZmlsZUZvcm0pO1xyXG5cclxuY2FyZFBvcHVwT3BlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb3BlbkNhcmRQb3B1cCk7XHJcblxyXG5pbWFnZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxucHJvZmlsZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY2FyZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY29uc3QgbG9nb0ltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dvXCIpO1xyXG5sb2dvSW1hZ2Uuc3JjID0gbG9nb1NyYztcclxuXHJcbmNvbnN0IGVkaXRJY29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0LWljb25cIik7XHJcbmVkaXRJY29uLnNyYyA9IHByb2ZpbGVTcmM7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IGRhdGEgfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9hYm91dE1lRWxlbWVudCA9IGRhdGEuYWJvdXQ7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIGNvbnN0IHVzZXJJbmZvID0ge307XHJcblxyXG4gICAgdXNlckluZm8ubmFtZSA9IHRoaXMuX25hbWVFbGVtZW50O1xyXG4gICAgdXNlckluZm8uYWJvdXQgPSB0aGlzLl9hYm91dE1lRWxlbWVudDtcclxuXHJcbiAgICByZXR1cm4gdXNlckluZm87XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyhuYW1lLCBhYm91dCkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fYWJvdXRNZUVsZW1lbnQgPSBhYm91dDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgcG9wdXBJbWFnZSwgcG9wdXBMb2NhdGlvbikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gcG9wdXBJbWFnZTtcclxuICAgIHRoaXMuX3BvcHVwTG9jYXRpb24gPSBwb3B1cExvY2F0aW9uO1xyXG4gIH1cclxuICBvcGVuID0gKHsgc3JjLCBhbHQgfSkgPT4ge1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBzcmM7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLmFsdCA9IGFsdDtcclxuICAgIHRoaXMuX3BvcHVwTG9jYXRpb24udGV4dENvbnRlbnQgPSBhbHQ7XHJcbiAgfTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGRhdGEsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lclNlbGVjdG9yO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKGRhdGEpIHtcclxuICAgIGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicCIsIkFwaSIsImNvbnN0cnVjdG9yIiwiYmFzZVVybCIsImF1dGhvcml6YXRpb25Db2RlIiwidGhpcyIsIl9iYXNlVXJsIiwiX2F1dGhvcml6YXRpb24iLCJyZXR1cm5Kc29uIiwiZmV0Y2giLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInRoZW4iLCJyZXMiLCJqc29uIiwidXBkYXRlVXNlckRhdGEiLCJuYW1lIiwiYWJvdXQiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInBvc3RDYXJkIiwibGluayIsImRlbGV0ZUNhcmQiLCJjYXJkSWQiLCJsaWtlQ2FyZCIsImVkaXRQcm9maWxlSW1hZ2UiLCJhdmF0YXIiLCJmb3JtVmFsaWRhdGlvbk9iamVjdCIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiQ2FyZCIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJ1cGRhdGVBcGlPbkxpa2UiLCJfbmFtZSIsIl9saW5rIiwiX2xpa2VzIiwibGlrZXMiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl91cGRhdGVBcGlPbkxpa2UiLCJfZ2V0VGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2hhbmRsZUNhcmRDbGlja0xpc3RlbmVyIiwiX2hhbmRsZUNhcmRMaWtlQnV0dG9uIiwiX2VsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicmV0dXJuTGlrZUNvdW50ZXIiLCJfbGlrZXNDb3VudGUiLCJnZW5lcmF0ZUNhcmQiLCJpbWFnZUVsZW1lbnQiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsImxlbmd0aCIsIl9oaWdobGlnaHRVc2VyTGlrZSIsImNhcmRMaWtlQnV0dG9uIiwiZm9yRWFjaCIsImxpa2UiLCJfaWQiLCJhZGQiLCJVc2VyQ2FyZCIsImhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrIiwiaGFuZGVsQ2FyZERlbGV0ZSIsInN1cGVyIiwicmVtb3ZlIiwiX2NhcmREZWxldGUiLCJfaGFuZGxlRGVsZXRlQnV0dG9uIiwiZGVsZXRlQ2FyZExpc3RlbnIiLCJfaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2siLCJfaGFuZGVsRGVsZXRlIiwiY2FyZEVsZW1lbnQiLCJGb3JtVmFsaWRhdG9yIiwidmFsaWRhdGlvbk9iamVjdCIsIl9pbnB1dExpc3QiLCJpbnB1dEVsZW1lbnQiLCJfaGlkZUlucHV0RXJyb3IiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJfYnV0dG9uRWxlbWVudCIsIl9mb3JtU2VsZWN0b3IiLCJfaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiX3Nob3dJbnB1dEVycm9yIiwiZXJyb3JNZXNzYWdlIiwiX2Vycm9yRWxlbWVudCIsIl9mb3JtRWxlbWVudCIsImlkIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oYXNJbnZhbGlkSW5wdXQiLCJpbnB1dExpc3QiLCJzb21lIiwiZGlzYWJsZWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZW5hYmxlVmFsaWRhdGlvbiIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImtleSIsIl9wb3B1cCIsImNsb3NlQnV0dG9uIiwiY29udGFpbnMiLCJjbG9zZSIsIm9wZW4iLCJzZXRFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwid2luZG93IiwiX2hhbmRsZUVzY0Nsb3NlIiwiX2hhbmRsZU1vdXNlRG93biIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQb3B1cFdpdGhGb3JtIiwiZm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJfZm9ybSIsInJlc2V0IiwiX2hhbmRlbE5vTG9kaW5nIiwiX3N1Ym1pdEJ1dHRvbiIsIl9oYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2dldElucHV0VmFsdWVzIiwiZm9ybVZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJoYW5kZWxMb2FkaW5nIiwicHJvZmlsZVBvcHVwT3BlbkJ1dHRvbiIsImNhcmRQb3B1cE9wZW5CdXR0b24iLCJwcm9maWxlSW1hZ2VPdmVybGF5IiwicHJvZmlsZUltYWdlIiwicHJvZmlsZU5hbWUiLCJwcm9maWxlQWJvdXQiLCJwcm9maWxlSW1hZ2VQb3B1cCIsImltYWdlSW5wdXQiLCJwcm9maWxlUG9wdXAiLCJjYXJkUG9wdXAiLCJwcm9maWxlRm9ybSIsIm5hbWVJbnB1dCIsImFib3V0SW5wdXQiLCJjYXJkRm9ybSIsInBhbGNlSW5wdXQiLCJ1cmxJbnB1dCIsImNhcmRzQ29udGFpbmVyIiwiaW1hZ2VQb3B1cCIsImltYWdlUG9wdXBJbWFnZSIsImltYWdlUG9wdXBMb2NhdGlvbiIsInVzZXJJbmZvT2JqZWN0IiwiZ2V0VXNlckluZm9BcGkiLCJ1cGRhdGVVc2VySW5mb0FwaSIsInByb2ZpbGVJbWFnZUFwaSIsImluaXRpYWxDYXJkZEFwaSIsInBvc3RDYXJkQXBpIiwibGlrZUNhcmRBcGkiLCJwcm9maWxlRm9ybVZhbGlkYXRvciIsImNhcmRGb3JtVmFsaWRhdG9yIiwiaW1hZ2VGb3JtVmFsaWRhdG9yIiwidXNlckluZm8iLCJfbmFtZUVsZW1lbnQiLCJfYWJvdXRNZUVsZW1lbnQiLCJnZXRVc2VySW5mbyIsInNldFVzZXJJbmZvIiwicHJvZmlsZUltYWdlUG9wdXBDbGFzcyIsInNldFVzZXJJbWFnZSIsInBvcHVwSW1hZ2UiLCJwb3B1cExvY2F0aW9uIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBMb2NhdGlvbiIsInByb2ZpbGVQb3B1cENsYXNzIiwiaGFuZGVsVXNlckluZm8iLCJjYXJkTGlzdCIsImNvbnRhaW5lclNlbGVjdG9yIiwicmVuZGVyZXIiLCJfZGF0YSIsIl9jb250YWluZXIiLCJfcmVuZGVyZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJvd25lciIsImNhcmQiLCJyIiwiY29uc29sZSIsImxvZyIsImlzVXNlckNhcmQiLCJjYXJkUG9wdXBDbGFzcyIsIm9rIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImluZm8iLCJyZXNldFZhbGlkYXRpb24iLCJ1c2VyRGF0YSIsImZpbGxQcm9maWxlRm9ybSIsImdldEVsZW1lbnRCeUlkIiwibG9nb1NyYyIsInByb2ZpbGVTcmMiXSwic291cmNlUm9vdCI6IiJ9